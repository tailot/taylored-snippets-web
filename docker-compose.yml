x-frontend-common: &frontend-common
  build:
    context: .
    dockerfile: ./Dockerfile
  ports:
    - "80:80"

x-orchestrator-common: &orchestrator-common
  build:
    context: ./src/orchestrator
    dockerfile: ./Dockerfile
  ports:
    - "3001:3001"
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  command: node orchestrator.js
  # depends_on will be added specifically for each profile

services:
  # --- SINGLETENANT PROFILE SERVICES ---
  frontend-singletenant:
    <<: *frontend-common
    profiles: ["singletenant"]
    depends_on:
      orchestrator-singletenant:
        condition: service_started

  # --- MULTITENANT PROFILE SERVICES ---
  frontend-multitenant:
    <<: *frontend-common
    profiles: ["multitenant"]
    depends_on:
      orchestrator-multitenant:
        condition: service_started

  orchestrator-multitenant:
    <<: *orchestrator-common
    environment:
      - NODE_ENV=production
      - REUSE_RUNNER_MODE=false
    profiles: ["multitenant"]
    depends_on:
      runner-builder:
        condition: service_started

  orchestrator-singletenant:
    <<: *orchestrator-common
    environment:
      - NODE_ENV=production
      - REUSE_RUNNER_MODE=true
    profiles: ["singletenant"]
    depends_on:
      runner-builder:
        condition: service_started

  # --- RUNNER SERVICE ---
  runner-builder:
    build:
      context: ./src/runner
      dockerfile: ./Dockerfile
    # This image name is crucial. The orchestrator will use it to start new runners.
    image: runner-image
    # No profiles, ports, environment, or command for a builder service

